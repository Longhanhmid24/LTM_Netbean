/* ===== FIX: B·∫ÆT BU·ªòC D√ôNG IP ƒê·ªòNG ===== */
if (location.protocol === 'http:' && location.hostname !== 'localhost' && location.hostname !== '127.0.0.1') {
    // √âp tr√¨nh duy·ªát cung c·∫•p mediaDevices d√π kh√¥ng ph·∫£i secure context
    Object.defineProperty(navigator, 'mediaDevices', {
        value: {
            getUserMedia: function(constraints) {
                return new Promise((resolve, reject) => {
                    const getUserMedia =
                        navigator.webkitGetUserMedia ||
                        navigator.mozGetUserMedia ||
                        navigator.msGetUserMedia ||
                        navigator.getUserMedia;

                    if (getUserMedia) {
                        getUserMedia.call(navigator, constraints, resolve, reject);
                    } else {
                        reject(new Error('getUserMedia not supported'));
                    }
                });
            },
            enumerateDevices: () => Promise.resolve([]),
            getSupportedConstraints: () => ({})
        },
        writable: false,
        configurable: false
    });
}

/* ===== Get URL params ===== */
const url = new URL(window.location.href);
const callId = url.searchParams.get("callId");
const userId = Number(url.searchParams.get("userId"));
const peerId = Number(url.searchParams.get("peerId"));
const callType = url.searchParams.get("type") || "video";
document.getElementById("peerLabel").innerText = peerId;

/* ===== WebRTC Setup ===== */
let pc, localStream;

// ‚úÖ FIX: H√†ng ƒë·ª£i ICE n·∫øu candidate t·ªõi qu√° s·ªõm
let pendingCandidates = [];

const localVideo = document.getElementById("localVideo");
const remoteVideo = document.getElementById("remoteVideo");

/* ==== WebSocket Signaling (d√πng relative path ‚Üí t·ª± theo IP) ==== */
const socket = new SockJS("/ws/call"); // ‚Üí ws://[YOUR_IP]:8080/ws/call
const stomp = Stomp.over(socket);

stomp.connect({}, () => {
    stomp.subscribe(`/queue/call/${userId}`, async msg => {
        const signal = JSON.parse(msg.body);
        // console.log("SIGNAL =>", signal);

        // ‚úÖ FIX: Khi c√≥ y√™u c·∫ßu g·ªçi ƒë·∫øn, ch·ªâ hi·ªÉn th·ªã UI & CH·ªú offer (kh√¥ng t·ª± offer)
        if (signal.type === "call_request") {
            // console.log("üìû Incoming call ‚Äî waiting for OFFER‚Ä¶");
            return;
        }

        if (signal.type === "offer") {
            try {
                // ‚úÖ FIX: Ng∆∞·ªùi nh·∫≠n ph·∫£i init t·∫°i ƒë√¢y ƒë·ªÉ b·∫≠t cam/mic
                await initWebRTC();

                await pc.setRemoteDescription({ type: "offer", sdp: signal.sdp });

                // ‚úÖ FIX: th√™m m·ªçi ICE ƒë√£ ƒë·ª£i tr∆∞·ªõc ƒë√≥ (n·∫øu c√≥)
                for (const cand of pendingCandidates) {
                    try { await pc.addIceCandidate(cand); } catch (e) { console.warn("late ICE add failed:", e); }
                }
                pendingCandidates = [];

                const answer = await pc.createAnswer();
                await pc.setLocalDescription(answer);
                sendSignal("answer", { sdp: answer.sdp });
            } catch (e) {
                console.error("Error handling OFFER:", e);
            }
        }
        else if (signal.type === "answer") {
            // ‚úÖ FIX: Ch·∫∑n answer r·ªóng (t·ª´ server) l√†m crash 'v='
            if (!signal.sdp) {
                console.warn("‚ö†Ô∏è Received ANSWER without SDP ‚Äî skip.");
                return;
            }
            try {
                await pc.setRemoteDescription({ type: "answer", sdp: signal.sdp });
            } catch (e) {
                console.error("Error setting ANSWER:", e);
            }
        }
        else if (signal.type === "candidate") {
            try {
                const candidate = JSON.parse(signal.candidate);

                // ‚úÖ FIX: N·∫øu ch∆∞a c√≥ remoteDescription ‚áí t·∫°m x·∫øp h√†ng
                if (!pc || !pc.remoteDescription) {
                    pendingCandidates.push(candidate);
                } else {
                    await pc.addIceCandidate(candidate);
                }
            } catch (e) {
                console.error("L·ªói khi th√™m ICE candidate:", e, signal.candidate);
            }
        }
        else if (signal.type === "hangup") {
            endCallUI();
        }
    });
    
    // ‚úÖ Gi·ªØ nguy√™n logic g·ªëc c·ªßa b·∫°n
    // N·∫øu l√† ng∆∞·ªùi g·ªçi (ng∆∞·ªùi c√≥ userId nh·ªè h∆°n) th√¨ b·∫Øt ƒë·∫ßu cu·ªôc g·ªçi ngay
    if (userId < peerId) startCall();
});

/* ==== Functions ==== */
async function initWebRTC() {
    if (pc) return; // ƒê√£ kh·ªüi t·∫°o r·ªìi th√¨ kh√¥ng l√†m l·∫°i

    if (!navigator.mediaDevices?.getUserMedia) {
        alert("Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ camera/microphone.");
        return;
    }

    // C·∫•u h√¨nh ICE Server (n√™n d√πng STUN/TURN server th·ª±c t·∫ø)
    pc = new RTCPeerConnection({
        iceServers: [{ urls: "stun:stun.l.google.com:19302" }]
    });

    pc.onicecandidate = e => {
        if (e.candidate) sendSignal("candidate", { candidate: JSON.stringify(e.candidate) });
    };

    pc.ontrack = e => {
        remoteVideo.srcObject = e.streams[0];
    };

    // L·∫•y lu·ªìng media
    try {
        localStream = await navigator.mediaDevices.getUserMedia(
            callType === "video" ? { video: true, audio: true } : { audio: true, video: false }
        );

        localStream.getTracks().forEach(t => pc.addTrack(t, localStream));
        localVideo.srcObject = localStream;
        
        // ‚úÖ FIX: C·∫≠p nh·∫≠t tr·∫°ng th√°i UI sau khi l·∫•y ƒë∆∞·ª£c localStream
        updateControlsUI();
        
    } catch (e) {
        alert("Kh√¥ng th·ªÉ truy c·∫≠p camera/microphone: " + e.name);
        console.error("L·ªói getUserMedia:", e);
    }
}

function updateControlsUI() {
    // ƒê·∫£m b·∫£o n√∫t Mic ho·∫°t ƒë·ªông
    const micTrack = localStream?.getAudioTracks()[0];
    if (micTrack) {
        document.getElementById("btnMic").style.opacity = micTrack.enabled ? "1" : "0.5";
    }

    // ƒê·∫£m b·∫£o n√∫t Cam ho·∫°t ƒë·ªông (n·∫øu l√† video call)
    if (callType === "video") {
        const camTrack = localStream?.getVideoTracks()[0];
        if (camTrack) {
            document.getElementById("btnCam").style.opacity = camTrack.enabled ? "1" : "0.5";
        }
    } else {
        // ·∫®n n√∫t Cam n·∫øu ch·ªâ l√† audio call
        document.getElementById("btnCam").style.display = "none";
    }
}

async function startCall() {
    // ‚úÖ FIX: b·∫≠t cam/mic tr∆∞·ªõc r·ªìi m·ªõi t·∫°o offer
    await initWebRTC();
    if (!pc) return;
    
    const offer = await pc.createOffer();
    await pc.setLocalDescription(offer);
    sendSignal("offer", { sdp: offer.sdp });
}

function sendSignal(type, data = {}) {
    stomp.send("/app/call.send", {}, JSON.stringify({
        callId,
        callerId: userId,
        receiverId: peerId,
        type,
        ...data
    }));
}

/* ===== UI buttons (ƒë√£ th√™m ki·ªÉm tra localStream) ===== */
document.getElementById("btnMic").onclick = () => {
    const track = localStream?.getAudioTracks()[0];
    if (track) {
        track.enabled = !track.enabled;
        document.getElementById("btnMic").style.opacity = track.enabled ? "1" : "0.5";
        // console.log(`Mic status changed: ${track.enabled}`);
    } else {
        console.error("Kh√¥ng t√¨m th·∫•y Audio Track. LocalStream ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.");
    }
};

document.getElementById("btnCam").onclick = () => {
    const track = localStream?.getVideoTracks()[0];
    if (track) {
        track.enabled = !track.enabled;
        document.getElementById("btnCam").style.opacity = track.enabled ? "1" : "0.5";
        // console.log(`Camera status changed: ${track.enabled}`);
    } else {
        console.error("Kh√¥ng t√¨m th·∫•y Video Track. LocalStream ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o ho·∫∑c kh√¥ng ph·∫£i Video Call.");
    }
};

document.getElementById("btnEnd").onclick = () => {
    sendSignal("hangup");
    endCallUI();
};

function endCallUI() {
    if (localStream) localStream.getTracks().forEach(t => t.stop());
    if (pc) pc.close();
    
    // ƒê√≥ng c·ª≠a s·ªï sau m·ªôt ch√∫t ƒë·ªô tr·ªÖ ƒë·ªÉ ƒë·∫£m b·∫£o t√≠n hi·ªáu ƒë∆∞·ª£c g·ª≠i ƒëi
    setTimeout(() => {
        window.close();
    }, 500); 
}
